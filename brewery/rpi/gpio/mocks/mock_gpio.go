// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/golang001/brewery/rpi/gpio/igpio (interfaces: IGpio,Controller,PinGpio)

// Package mock_igpio is a generated GoMock package.
package mock_igpio

import (
	gomock "github.com/golang/mock/gomock"
	igpio "github.com/golang001/brewery/rpi/gpio/igpio"
	reflect "reflect"
)

// MockIGpio is a mock of IGpio interface
type MockIGpio struct {
	ctrl     *gomock.Controller
	recorder *MockIGpioMockRecorder
}

// MockIGpioMockRecorder is the mock recorder for MockIGpio
type MockIGpioMockRecorder struct {
	mock *MockIGpio
}

// NewMockIGpio creates a new mock instance
func NewMockIGpio(ctrl *gomock.Controller) *MockIGpio {
	mock := &MockIGpio{ctrl: ctrl}
	mock.recorder = &MockIGpioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGpio) EXPECT() *MockIGpioMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIGpio) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIGpioMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIGpio)(nil).Close))
}

// Open mocks base method
func (m *MockIGpio) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockIGpioMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIGpio)(nil).Open))
}

// Pin mocks base method
func (m *MockIGpio) Pin(arg0 byte) igpio.PinGpio {
	ret := m.ctrl.Call(m, "Pin", arg0)
	ret0, _ := ret[0].(igpio.PinGpio)
	return ret0
}

// Pin indicates an expected call of Pin
func (mr *MockIGpioMockRecorder) Pin(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockIGpio)(nil).Pin), arg0)
}

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// PowerPin mocks base method
func (m *MockController) PowerPin(arg0 int, arg1 bool) error {
	ret := m.ctrl.Call(m, "PowerPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerPin indicates an expected call of PowerPin
func (mr *MockControllerMockRecorder) PowerPin(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerPin", reflect.TypeOf((*MockController)(nil).PowerPin), arg0, arg1)
}

// ReadTemperature mocks base method
func (m *MockController) ReadTemperature(arg0 igpio.TemperatureAddress) (float64, error) {
	ret := m.ctrl.Call(m, "ReadTemperature", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemperature indicates an expected call of ReadTemperature
func (mr *MockControllerMockRecorder) ReadTemperature(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemperature", reflect.TypeOf((*MockController)(nil).ReadTemperature), arg0)
}

// MockPinGpio is a mock of PinGpio interface
type MockPinGpio struct {
	ctrl     *gomock.Controller
	recorder *MockPinGpioMockRecorder
}

// MockPinGpioMockRecorder is the mock recorder for MockPinGpio
type MockPinGpioMockRecorder struct {
	mock *MockPinGpio
}

// NewMockPinGpio creates a new mock instance
func NewMockPinGpio(ctrl *gomock.Controller) *MockPinGpio {
	mock := &MockPinGpio{ctrl: ctrl}
	mock.recorder = &MockPinGpioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinGpio) EXPECT() *MockPinGpioMockRecorder {
	return m.recorder
}

// High mocks base method
func (m *MockPinGpio) High() {
	m.ctrl.Call(m, "High")
}

// High indicates an expected call of High
func (mr *MockPinGpioMockRecorder) High() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "High", reflect.TypeOf((*MockPinGpio)(nil).High))
}

// Low mocks base method
func (m *MockPinGpio) Low() {
	m.ctrl.Call(m, "Low")
}

// Low indicates an expected call of Low
func (mr *MockPinGpioMockRecorder) Low() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Low", reflect.TypeOf((*MockPinGpio)(nil).Low))
}
