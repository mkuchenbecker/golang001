// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vessel.proto

package deltav_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RadiationType int32

const (
	RadiationType_UNKNOWN_RADIATION_TYPE RadiationType = 0
	RadiationType_RF                     RadiationType = 1
	RadiationType_GAMMA                  RadiationType = 2
	RadiationType_THERM                  RadiationType = 3
)

var RadiationType_name = map[int32]string{
	0: "UNKNOWN_RADIATION_TYPE",
	1: "RF",
	2: "GAMMA",
	3: "THERM",
}

var RadiationType_value = map[string]int32{
	"UNKNOWN_RADIATION_TYPE": 0,
	"RF":    1,
	"GAMMA": 2,
	"THERM": 3,
}

func (x RadiationType) String() string {
	return proto.EnumName(RadiationType_name, int32(x))
}

func (RadiationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0c0e45ee319d513, []int{0}
}

type Sensor_Type int32

const (
	Sensor_UNKNOWN Sensor_Type = 0
	Sensor_PASSIVE Sensor_Type = 1
	Sensor_ACTIVE  Sensor_Type = 2
)

var Sensor_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "PASSIVE",
	2: "ACTIVE",
}

var Sensor_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"PASSIVE": 1,
	"ACTIVE":  2,
}

func (x Sensor_Type) String() string {
	return proto.EnumName(Sensor_Type_name, int32(x))
}

func (Sensor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0c0e45ee319d513, []int{0, 0}
}

type Sensor struct {
	SensorType           Sensor_Type   `protobuf:"varint,1,opt,name=sensor_type,json=sensorType,proto3,enum=deltav.protos.Sensor_Type" json:"sensor_type,omitempty"`
	RadiationType        RadiationType `protobuf:"varint,2,opt,name=radiation_type,json=radiationType,proto3,enum=deltav.protos.RadiationType" json:"radiation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Sensor) Reset()         { *m = Sensor{} }
func (m *Sensor) String() string { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()    {}
func (*Sensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0c0e45ee319d513, []int{0}
}

func (m *Sensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensor.Unmarshal(m, b)
}
func (m *Sensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensor.Marshal(b, m, deterministic)
}
func (m *Sensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensor.Merge(m, src)
}
func (m *Sensor) XXX_Size() int {
	return xxx_messageInfo_Sensor.Size(m)
}
func (m *Sensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensor.DiscardUnknown(m)
}

var xxx_messageInfo_Sensor proto.InternalMessageInfo

func (m *Sensor) GetSensorType() Sensor_Type {
	if m != nil {
		return m.SensorType
	}
	return Sensor_UNKNOWN
}

func (m *Sensor) GetRadiationType() RadiationType {
	if m != nil {
		return m.RadiationType
	}
	return RadiationType_UNKNOWN_RADIATION_TYPE
}

type SensorSystem struct {
	Sensors              []*Sensor `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SensorSystem) Reset()         { *m = SensorSystem{} }
func (m *SensorSystem) String() string { return proto.CompactTextString(m) }
func (*SensorSystem) ProtoMessage()    {}
func (*SensorSystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0c0e45ee319d513, []int{1}
}

func (m *SensorSystem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorSystem.Unmarshal(m, b)
}
func (m *SensorSystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorSystem.Marshal(b, m, deterministic)
}
func (m *SensorSystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorSystem.Merge(m, src)
}
func (m *SensorSystem) XXX_Size() int {
	return xxx_messageInfo_SensorSystem.Size(m)
}
func (m *SensorSystem) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorSystem.DiscardUnknown(m)
}

var xxx_messageInfo_SensorSystem proto.InternalMessageInfo

func (m *SensorSystem) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type Vessel struct {
	Id                   string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sensors              *SensorSystem `protobuf:"bytes,2,opt,name=sensors,proto3" json:"sensors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Vessel) Reset()         { *m = Vessel{} }
func (m *Vessel) String() string { return proto.CompactTextString(m) }
func (*Vessel) ProtoMessage()    {}
func (*Vessel) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0c0e45ee319d513, []int{2}
}

func (m *Vessel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vessel.Unmarshal(m, b)
}
func (m *Vessel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vessel.Marshal(b, m, deterministic)
}
func (m *Vessel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vessel.Merge(m, src)
}
func (m *Vessel) XXX_Size() int {
	return xxx_messageInfo_Vessel.Size(m)
}
func (m *Vessel) XXX_DiscardUnknown() {
	xxx_messageInfo_Vessel.DiscardUnknown(m)
}

var xxx_messageInfo_Vessel proto.InternalMessageInfo

func (m *Vessel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vessel) GetSensors() *SensorSystem {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func init() {
	proto.RegisterEnum("deltav.protos.RadiationType", RadiationType_name, RadiationType_value)
	proto.RegisterEnum("deltav.protos.Sensor_Type", Sensor_Type_name, Sensor_Type_value)
	proto.RegisterType((*Sensor)(nil), "deltav.protos.Sensor")
	proto.RegisterType((*SensorSystem)(nil), "deltav.protos.SensorSystem")
	proto.RegisterType((*Vessel)(nil), "deltav.protos.Vessel")
}

func init() { proto.RegisterFile("vessel.proto", fileDescriptor_e0c0e45ee319d513) }

var fileDescriptor_e0c0e45ee319d513 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0xec, 0x6e, 0x35, 0xa5, 0x2f, 0x6d, 0x58, 0x16, 0x94, 0x52, 0x3d, 0x94, 0x9c, 0x8a, 0x48,
	0x84, 0x88, 0x27, 0x0f, 0xb2, 0xd4, 0xa8, 0x41, 0x92, 0x94, 0x4d, 0xac, 0x78, 0x0a, 0x91, 0xec,
	0x21, 0x50, 0x9b, 0x90, 0x0d, 0x85, 0xfc, 0x99, 0x9f, 0x27, 0xd9, 0xb5, 0x6a, 0xa5, 0xb7, 0x19,
	0x98, 0x99, 0x37, 0xf3, 0x60, 0xb4, 0x15, 0x52, 0x8a, 0xb5, 0x53, 0xd5, 0x65, 0x53, 0xd2, 0x71,
	0x2e, 0xd6, 0x4d, 0xb6, 0xd5, 0x4c, 0xda, 0x9f, 0x08, 0x8c, 0x58, 0x6c, 0x64, 0x59, 0xd3, 0x5b,
	0x30, 0xa5, 0x42, 0x69, 0xd3, 0x56, 0x62, 0x82, 0x66, 0x68, 0x6e, 0xb9, 0x53, 0x67, 0x4f, 0xef,
	0x68, 0xad, 0x93, 0xb4, 0x95, 0xe0, 0xa0, 0xe5, 0x1d, 0xa6, 0x0b, 0xb0, 0xea, 0x2c, 0x2f, 0xb2,
	0xa6, 0x28, 0x37, 0xda, 0x8f, 0x95, 0xff, 0xfc, 0x9f, 0x9f, 0xef, 0x44, 0x2a, 0x61, 0x5c, 0xff,
	0xa5, 0xf6, 0x25, 0x1c, 0xa9, 0x30, 0x13, 0x06, 0x2f, 0xe1, 0x73, 0x18, 0xbd, 0x86, 0xa4, 0xd7,
	0x91, 0x25, 0x8b, 0x63, 0x7f, 0xe5, 0x11, 0x44, 0x01, 0x0c, 0xb6, 0x48, 0x3a, 0x8c, 0xed, 0x3b,
	0x18, 0xe9, 0x36, 0x71, 0x2b, 0x1b, 0xf1, 0x41, 0xaf, 0x60, 0xa0, 0x0b, 0xc9, 0x09, 0x9a, 0xf5,
	0xe7, 0xa6, 0x7b, 0x72, 0xb0, 0x3b, 0xdf, 0xa9, 0xec, 0x08, 0x8c, 0x95, 0x7a, 0x0d, 0xb5, 0x00,
	0x17, 0xb9, 0x5a, 0x3c, 0xe4, 0xb8, 0xc8, 0xe9, 0xcd, 0x6f, 0x54, 0x37, 0xc3, 0x74, 0xcf, 0x0e,
	0x46, 0xe9, 0xc3, 0x3f, 0x81, 0x17, 0x3e, 0x8c, 0xf7, 0xf6, 0xd1, 0x29, 0x9c, 0x7e, 0x0f, 0x49,
	0x39, 0xbb, 0xf7, 0x59, 0xe2, 0x47, 0x61, 0x9a, 0xbc, 0x2d, 0x3d, 0xd2, 0xa3, 0x06, 0x60, 0xfe,
	0x40, 0x10, 0x1d, 0xc2, 0xf1, 0x23, 0x0b, 0x02, 0x46, 0x70, 0x07, 0x93, 0x27, 0x8f, 0x07, 0xa4,
	0xff, 0x6e, 0xa8, 0x43, 0xd7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x7e, 0x4a, 0x50, 0xbd,
	0x01, 0x00, 0x00,
}
