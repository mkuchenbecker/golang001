// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver.proto

package deltav_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
//A driver is the system that controls thrust of the whole ship. The ship requests a change in kinetic
//energy and the drive attempts to satisfy the request.
//
//A Driver will typically contain a reactor, fuel tanks, radiator, and heat sink.
//
type DriveRequest struct {
	Orientation          *Vector3 `protobuf:"bytes,1,opt,name=orientation,proto3" json:"orientation,omitempty"`
	KineticEnergy        int64    `protobuf:"varint,2,opt,name=kinetic_energy,json=kineticEnergy,proto3" json:"kinetic_energy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriveRequest) Reset()         { *m = DriveRequest{} }
func (m *DriveRequest) String() string { return proto.CompactTextString(m) }
func (*DriveRequest) ProtoMessage()    {}
func (*DriveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{0}
}

func (m *DriveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriveRequest.Unmarshal(m, b)
}
func (m *DriveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriveRequest.Marshal(b, m, deterministic)
}
func (m *DriveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriveRequest.Merge(m, src)
}
func (m *DriveRequest) XXX_Size() int {
	return xxx_messageInfo_DriveRequest.Size(m)
}
func (m *DriveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DriveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DriveRequest proto.InternalMessageInfo

func (m *DriveRequest) GetOrientation() *Vector3 {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *DriveRequest) GetKineticEnergy() int64 {
	if m != nil {
		return m.KineticEnergy
	}
	return 0
}

type DriveResponse struct {
	KineticEnergyDelivered int64    `protobuf:"varint,2,opt,name=kinetic_energy_delivered,json=kineticEnergyDelivered,proto3" json:"kinetic_energy_delivered,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *DriveResponse) Reset()         { *m = DriveResponse{} }
func (m *DriveResponse) String() string { return proto.CompactTextString(m) }
func (*DriveResponse) ProtoMessage()    {}
func (*DriveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{1}
}

func (m *DriveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriveResponse.Unmarshal(m, b)
}
func (m *DriveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriveResponse.Marshal(b, m, deterministic)
}
func (m *DriveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriveResponse.Merge(m, src)
}
func (m *DriveResponse) XXX_Size() int {
	return xxx_messageInfo_DriveResponse.Size(m)
}
func (m *DriveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DriveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DriveResponse proto.InternalMessageInfo

func (m *DriveResponse) GetKineticEnergyDelivered() int64 {
	if m != nil {
		return m.KineticEnergyDelivered
	}
	return 0
}

func init() {
	proto.RegisterType((*DriveRequest)(nil), "deltav.model.DriveRequest")
	proto.RegisterType((*DriveResponse)(nil), "deltav.model.DriveResponse")
}

func init() { proto.RegisterFile("driver.proto", fileDescriptor_521003751d596b5e) }

var fileDescriptor_521003751d596b5e = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x29, 0xca, 0x2c,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x49, 0xcd, 0x29, 0x49, 0x2c,
	0xd3, 0xcb, 0xcd, 0x4f, 0x49, 0xcd, 0x91, 0xe2, 0x2b, 0xc8, 0x2f, 0xce, 0x2c, 0xc9, 0xcc, 0xcf,
	0x83, 0xc8, 0x2a, 0xe5, 0x71, 0xf1, 0xb8, 0x80, 0x54, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0x99, 0x73, 0x71, 0xe7, 0x17, 0x65, 0xa6, 0xe6, 0x95, 0x24, 0x82, 0x14, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x1b, 0x89, 0xea, 0x21, 0x9b, 0xa1, 0x17, 0x96, 0x9a, 0x5c, 0x92, 0x5f, 0x64,
	0x1c, 0x84, 0xac, 0x52, 0x48, 0x95, 0x8b, 0x2f, 0x3b, 0x33, 0x2f, 0xb5, 0x24, 0x33, 0x39, 0x3e,
	0x35, 0x2f, 0xb5, 0x28, 0xbd, 0x52, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x88, 0x17, 0x2a, 0xea,
	0x0a, 0x16, 0x54, 0xf2, 0xe4, 0xe2, 0x85, 0xda, 0x57, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x64,
	0xc1, 0x25, 0x81, 0xaa, 0x2f, 0x3e, 0x25, 0x35, 0x07, 0xe4, 0xfc, 0xd4, 0x14, 0xa8, 0x09, 0x62,
	0x28, 0x26, 0xb8, 0xc0, 0x64, 0x8d, 0x7c, 0xb8, 0xd8, 0xc0, 0x46, 0x15, 0x09, 0x39, 0x71, 0xb1,
	0x82, 0x59, 0x42, 0x52, 0xa8, 0x0e, 0x45, 0xf6, 0x99, 0x94, 0x34, 0x56, 0x39, 0x88, 0x2b, 0x94,
	0x18, 0x92, 0xd8, 0xc0, 0xe1, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x0e, 0xb7, 0x2a,
	0x3d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	Drive(ctx context.Context, in *DriveRequest, opts ...grpc.CallOption) (*DriveResponse, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Drive(ctx context.Context, in *DriveRequest, opts ...grpc.CallOption) (*DriveResponse, error) {
	out := new(DriveResponse)
	err := c.cc.Invoke(ctx, "/deltav.model.Driver/Drive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	Drive(context.Context, *DriveRequest) (*DriveResponse, error)
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Drive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Drive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deltav.model.Driver/Drive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Drive(ctx, req.(*DriveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deltav.model.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Drive",
			Handler:    _Driver_Drive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
