// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reactor.proto

package deltav_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReactorOutput_Type int32

const (
	ReactorOutput_UNKNOWN       ReactorOutput_Type = 0
	ReactorOutput_ENERGY_JOULES ReactorOutput_Type = 1
	ReactorOutput_HEAT_JOULES   ReactorOutput_Type = 2
	ReactorOutput_GAMMA_JOULES  ReactorOutput_Type = 3
)

var ReactorOutput_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "ENERGY_JOULES",
	2: "HEAT_JOULES",
	3: "GAMMA_JOULES",
}

var ReactorOutput_Type_value = map[string]int32{
	"UNKNOWN":       0,
	"ENERGY_JOULES": 1,
	"HEAT_JOULES":   2,
	"GAMMA_JOULES":  3,
}

func (x ReactorOutput_Type) String() string {
	return proto.EnumName(ReactorOutput_Type_name, int32(x))
}

func (ReactorOutput_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a9d77bb3db9aa96, []int{1, 0}
}

type ReactRequest struct {
	DesiredEnergy        int64    `protobuf:"varint,1,opt,name=desiredEnergy,proto3" json:"desiredEnergy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReactRequest) Reset()         { *m = ReactRequest{} }
func (m *ReactRequest) String() string { return proto.CompactTextString(m) }
func (*ReactRequest) ProtoMessage()    {}
func (*ReactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a9d77bb3db9aa96, []int{0}
}

func (m *ReactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReactRequest.Unmarshal(m, b)
}
func (m *ReactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReactRequest.Marshal(b, m, deterministic)
}
func (m *ReactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReactRequest.Merge(m, src)
}
func (m *ReactRequest) XXX_Size() int {
	return xxx_messageInfo_ReactRequest.Size(m)
}
func (m *ReactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReactRequest proto.InternalMessageInfo

func (m *ReactRequest) GetDesiredEnergy() int64 {
	if m != nil {
		return m.DesiredEnergy
	}
	return 0
}

type ReactorOutput struct {
	Type                 ReactorOutput_Type `protobuf:"varint,1,opt,name=type,proto3,enum=deltav.model.ReactorOutput_Type" json:"type,omitempty"`
	Amount               int64              `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReactorOutput) Reset()         { *m = ReactorOutput{} }
func (m *ReactorOutput) String() string { return proto.CompactTextString(m) }
func (*ReactorOutput) ProtoMessage()    {}
func (*ReactorOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a9d77bb3db9aa96, []int{1}
}

func (m *ReactorOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReactorOutput.Unmarshal(m, b)
}
func (m *ReactorOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReactorOutput.Marshal(b, m, deterministic)
}
func (m *ReactorOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReactorOutput.Merge(m, src)
}
func (m *ReactorOutput) XXX_Size() int {
	return xxx_messageInfo_ReactorOutput.Size(m)
}
func (m *ReactorOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ReactorOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ReactorOutput proto.InternalMessageInfo

func (m *ReactorOutput) GetType() ReactorOutput_Type {
	if m != nil {
		return m.Type
	}
	return ReactorOutput_UNKNOWN
}

func (m *ReactorOutput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReactResponse struct {
	Outputs              []*ReactorOutput `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReactResponse) Reset()         { *m = ReactResponse{} }
func (m *ReactResponse) String() string { return proto.CompactTextString(m) }
func (*ReactResponse) ProtoMessage()    {}
func (*ReactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a9d77bb3db9aa96, []int{2}
}

func (m *ReactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReactResponse.Unmarshal(m, b)
}
func (m *ReactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReactResponse.Marshal(b, m, deterministic)
}
func (m *ReactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReactResponse.Merge(m, src)
}
func (m *ReactResponse) XXX_Size() int {
	return xxx_messageInfo_ReactResponse.Size(m)
}
func (m *ReactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReactResponse proto.InternalMessageInfo

func (m *ReactResponse) GetOutputs() []*ReactorOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterEnum("deltav.model.ReactorOutput_Type", ReactorOutput_Type_name, ReactorOutput_Type_value)
	proto.RegisterType((*ReactRequest)(nil), "deltav.model.ReactRequest")
	proto.RegisterType((*ReactorOutput)(nil), "deltav.model.ReactorOutput")
	proto.RegisterType((*ReactResponse)(nil), "deltav.model.ReactResponse")
}

func init() { proto.RegisterFile("reactor.proto", fileDescriptor_2a9d77bb3db9aa96) }

var fileDescriptor_2a9d77bb3db9aa96 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcd, 0x6a, 0x83, 0x40,
	0x14, 0x85, 0x63, 0x4c, 0x23, 0x5c, 0xb5, 0xb5, 0x77, 0x51, 0x24, 0xd9, 0x88, 0x74, 0x91, 0x95,
	0x0b, 0x9b, 0x3e, 0x80, 0x05, 0x9b, 0xfe, 0xa9, 0x30, 0x4d, 0x28, 0x5d, 0x15, 0x5b, 0x2f, 0xa5,
	0x90, 0x38, 0xd6, 0x19, 0x0b, 0xbe, 0x51, 0x1f, 0xb3, 0x64, 0xa2, 0xd0, 0x40, 0xc8, 0x6e, 0xe6,
	0x9c, 0x6f, 0xe6, 0x7e, 0xcc, 0x80, 0x5d, 0x53, 0xfe, 0x21, 0x79, 0x1d, 0x54, 0x35, 0x97, 0x1c,
	0xad, 0x82, 0xd6, 0x32, 0xff, 0x09, 0x36, 0xbc, 0xa0, 0xb5, 0x3f, 0x07, 0x8b, 0x6d, 0x6b, 0x46,
	0xdf, 0x0d, 0x09, 0x89, 0x97, 0x60, 0x17, 0x24, 0xbe, 0x6a, 0x2a, 0xe2, 0x92, 0xea, 0xcf, 0xd6,
	0xd5, 0x3c, 0x6d, 0xa6, 0xb3, 0xfd, 0xd0, 0xff, 0xd5, 0xc0, 0x66, 0xbb, 0x5b, 0xb3, 0x46, 0x56,
	0x8d, 0xc4, 0x39, 0x8c, 0x64, 0x5b, 0x91, 0xc2, 0x4f, 0x43, 0x2f, 0xf8, 0x3f, 0x24, 0xd8, 0x43,
	0x83, 0x65, 0x5b, 0x11, 0x53, 0x34, 0x5e, 0xc0, 0x38, 0xdf, 0xf0, 0xa6, 0x94, 0xee, 0x50, 0x8d,
	0xe9, 0x76, 0xfe, 0x3d, 0x8c, 0xb6, 0x14, 0x9a, 0x60, 0xac, 0xd2, 0xc7, 0x34, 0x7b, 0x49, 0x9d,
	0x01, 0x9e, 0x83, 0x1d, 0xa7, 0x31, 0x5b, 0xbc, 0xbe, 0x3d, 0x64, 0xab, 0xa7, 0xf8, 0xd9, 0xd1,
	0xf0, 0x0c, 0xcc, 0xbb, 0x38, 0x5a, 0xf6, 0xc1, 0x10, 0x1d, 0xb0, 0x16, 0x51, 0x92, 0x44, 0x7d,
	0xa2, 0xfb, 0xb7, 0x9d, 0x29, 0x23, 0x51, 0xf1, 0x52, 0x10, 0x5e, 0x83, 0xc1, 0x95, 0x88, 0x70,
	0x35, 0x4f, 0x9f, 0x99, 0xe1, 0xf4, 0x88, 0x2c, 0xeb, 0xd9, 0x30, 0x01, 0xa3, 0x6b, 0xf0, 0x06,
	0x4e, 0xd4, 0x12, 0x27, 0x07, 0x4e, 0x76, 0x0f, 0x39, 0x99, 0x1e, 0xec, 0x76, 0x0e, 0xfe, 0xe0,
	0x7d, 0xac, 0x3e, 0xe3, 0xea, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x00, 0x87, 0xf1, 0x9d, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReactorClient is the client API for Reactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReactorClient interface {
	React(ctx context.Context, in *ReactRequest, opts ...grpc.CallOption) (*ReactResponse, error)
}

type reactorClient struct {
	cc *grpc.ClientConn
}

func NewReactorClient(cc *grpc.ClientConn) ReactorClient {
	return &reactorClient{cc}
}

func (c *reactorClient) React(ctx context.Context, in *ReactRequest, opts ...grpc.CallOption) (*ReactResponse, error) {
	out := new(ReactResponse)
	err := c.cc.Invoke(ctx, "/deltav.model.Reactor/React", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReactorServer is the server API for Reactor service.
type ReactorServer interface {
	React(context.Context, *ReactRequest) (*ReactResponse, error)
}

func RegisterReactorServer(s *grpc.Server, srv ReactorServer) {
	s.RegisterService(&_Reactor_serviceDesc, srv)
}

func _Reactor_React_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactorServer).React(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deltav.model.Reactor/React",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactorServer).React(ctx, req.(*ReactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reactor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deltav.model.Reactor",
	HandlerType: (*ReactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "React",
			Handler:    _Reactor_React_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reactor.proto",
}
